
services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: docker.io/bitnami/kafka:2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CFG_LISTENERS: "CLIENT://:9092,EXTERNAL://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "CLIENT://127.0.0.1:9092,EXTERNAL://localhost:9093"
      KAFKA_INTER_BROKER_LISTENER_NAME: "CLIENT"
      KAFKA_CFG_MESSAGE_MAX_BYTES: "50000000"
      KAFKA_CFG_REPLICA_FETCH_MAX_BYTES: "50000000"
      KAFKA_CFG_COMPRESSION_TYPE: "gzip"
      KAFKA_CFG_COMPRESSION_LEVEL: "6"
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:master
    container_name: kafka-ui
    ports:
      - "5050:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
    depends_on:
      - zookeeper
      - kafka

  mongodb:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  redis:
    image: redis:6.0
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - /Users/talha/redis-conf/redis.conf:/usr/local/etc/redis/redis.conf
      - /Users/talha/redis-conf/users.acl:/data/users.acl
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  proxy:
    image: nginx:stable-alpine
    container_name: nesy_proxy
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - proxy-net

  cors-init:
    image: python:3.10-alpine
    container_name: cors_init
    working_dir: /opt
    volumes:
      - ./add_cors_microservices.py:/opt/add_cors_microservices.py:ro
      - ./projects/nesy/NESY.WebAPI:/opt/projects/nesy/NESY.WebAPI:rw
    entrypoint: ["python", "add_cors_microservices.py"]
    restart: "no"
    depends_on:
      - mongodb
      - redis
      - kafka
      - zookeeper

networks:
  proxy-net:
    driver: bridge

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local


